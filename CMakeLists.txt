cmake_minimum_required(VERSION 3.16)

project(tabletime-scheduler VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(FetchContent)

FetchContent_Declare(
  yaml-cpp
  GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git
  GIT_TAG master # Can be a tag (yaml-cpp-x.x.x), a commit hash, or a branch name (master)
)
FetchContent_GetProperties(yaml-cpp)

if(NOT yaml-cpp_POPULATED)
  message(STATUS "Fetching yaml-cpp...")
  FetchContent_Populate(yaml-cpp)
  add_subdirectory(${yaml-cpp_SOURCE_DIR} ${yaml-cpp_BINARY_DIR})
endif()

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets LinguistTools)

set(TS_FILES tabletime-scheduler_en_US.ts)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        timetable/models/activity.h
        timetable/models/owner.h
        timetable/models/timeinterval.h
        timetable/models/scheduledactivity.h
        timetable/models/schedulepoolmanager.h timetable/models/schedulepoolmanager.cpp
        timetable/models/activitypoolmanager.h timetable/models/activitypoolmanager.cpp
        icons.qrc
        ui/qawesometoolbutton.h
        ui/activititesmanager.h ui/activititesmanager.cpp ui/activititesmanager.ui
        timetable/ui/qactivity.h timetable/ui/qactivity.cpp
        timetable/parser/timetablefile.h
        ui/ownerselectionbutton.h ui/ownerselectionbutton.cpp
        ui/ownericonbuilder.h ui/ownericonbuilder.cpp
        ui/fontawesomeiconbuilder.h ui/fontawesomeiconbuilder.cpp
        ui/newuserform.h ui/newuserform.cpp ui/newuserform.ui
        ui/tabletimescene.h ui/tabletimescene.cpp
        timetable/ui/qscheduleactivity.h timetable/ui/qscheduleactivity.cpp
        timetable/models/schedulegridsizemanager.h timetable/models/schedulegridsizemanager.cpp
        ui/weektabletime.h ui/weektabletime.cpp
        models/classificationcolormanager.h models/classificationcolormanager.cpp
        timetable/models/resizemode.h
        TO-DO.txt
        ui/menu/labeltime.h ui/menu/labeltime.cpp
        ui/menu/scheduledactivitymenu.h ui/menu/scheduledactivitymenu.cpp
        ui/viewselectionbutton.h ui/viewselectionbutton.cpp
        ui/usereditselectionaction.h ui/usereditselectionaction.cpp
        models/themecolors.h models/themecolors.cpp
        ui/importdlg.h ui/importdlg.cpp ui/importdlg.ui
        process/importprocess.h process/importprocess.cpp
        models/importoptions.h
        models/colorGenerators/colorgenerator.h
        models/colorGenerators/rainbowlcolorsgenerator.h models/colorGenerators/rainbowlcolorsgenerator.cpp
        ui/configurationdlg.h ui/configurationdlg.cpp ui/configurationdlg.ui
        parser/configurationparser.h
        parser/configurationparser.cpp
)

qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES es)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
  if (WIN32)
  #! [appicon_windows]
      set(tabletime-scheduler "${CMAKE_CURRENT_SOURCE_DIR}/icon/tabletime-scheduler.rc")
      qt_add_executable(tabletime-scheduler MANUAL_FINALIZATION ${PROJECT_SOURCES} ${app_icon_resource_windows})
  #! [appicon_windows]
  elseif (APPLE)
  #! [appicon_macOS]
      # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
      # generated by CMake. This variable contains the .icns file name,
      # without the path.
      set(MACOSX_BUNDLE_ICON_FILE photosurface.icns)

      # And the following tells CMake where to find and install the file itself.
      set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/icon/tabletime-scheduler.icns")
      set_source_files_properties(${app_icon_macos} PROPERTIES
             MACOSX_PACKAGE_LOCATION "Resources")

      qt_add_executable(tabletime-scheduler MACOSX_BUNDLE MANUAL_FINALIZATION ${PROJECT_SOURCES} ${app_icon_macos})
  #! [appicon_macOS]
  else()
      qt_add_executable(tabletime-scheduler MANUAL_FINALIZATION ${PROJECT_SOURCES})
  endif()

# Define target properties for Android with Qt 6 as:
#    set_property(TARGET tabletime-scheduler APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else()
    if(ANDROID)
        add_library(tabletime-scheduler SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(tabletime-scheduler
            ${PROJECT_SOURCES}
        )
    endif()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif()

qt_collect_translation_source_targets(i18n_targets)
qt_add_lupdate(SOURCE_TARGETS ${i18n_targets})

qt_add_translations(tabletime-scheduler
    QM_FILES_OUTPUT_VARIABLE qm_files)
 install(FILES ${qm_files} DESTINATION "translations")

target_link_libraries(tabletime-scheduler PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(tabletime-scheduler PUBLIC yaml-cpp::yaml-cpp)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER org.tabletime-scheduler)
endif()
set_target_properties(tabletime-scheduler PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS tabletime-scheduler
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(tabletime-scheduler)
endif()
